<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.sikiapp.springbootinaction.mapper.test2.UserAuth2Mapper">
    <resultMap id="BaseResultMap" type="com.sikiapp.springbootinaction.model.UserAuth">
        <id column="id" jdbcType="INTEGER" property="id" />
        <result column="user" jdbcType="INTEGER" property="user" />
        <result column="identity_type" jdbcType="TINYINT" property="identityType" />
        <result column="identifier" jdbcType="VARCHAR" property="identifier" />
        <result column="certificate" jdbcType="VARCHAR" property="certificate" />
        <result column="name" jdbcType="VARCHAR" property="name" />
        <result column="gender" jdbcType="VARCHAR" property="gender" />
        <result column="face" jdbcType="VARCHAR" property="face" />
    </resultMap>

    <sql id="Base_Column_List">
        id, `user`, identity_type, identifier, certificate, `name`, gender, face
    </sql>

    <select id="selectByPrimaryKey" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List" />
        from user_auth
        where id = #{id,jdbcType=INTEGER}
    </select>

    <delete id="deleteByPrimaryKey" parameterType="java.lang.Integer">
        delete from user_auth
        where id = #{id,jdbcType=INTEGER}
    </delete>

    <insert id="insert" parameterType="com.sikiapp.springbootinaction.model.UserAuth" useGeneratedKeys="true" keyProperty="id">
        insert into user_auth (id, `user`, identity_type,
                               identifier, certificate, `name`,
                               gender, face)
        values (#{id,jdbcType=INTEGER}, #{user,jdbcType=INTEGER}, #{identityType,jdbcType=TINYINT},
                #{identifier,jdbcType=VARCHAR}, #{certificate,jdbcType=VARCHAR}, #{name,jdbcType=VARCHAR},
                #{gender,jdbcType=VARCHAR}, #{face,jdbcType=VARCHAR})
    </insert>

    <insert id="insertSelective" parameterType="com.sikiapp.springbootinaction.model.UserAuth" useGeneratedKeys="true" keyProperty="id">
        insert into user_auth
        <trim prefix="(" suffix=")" suffixOverrides=",">
            <if test="id != null">
                id,
            </if>
            <if test="user != null">
                `user`,
            </if>
            <if test="identityType != null">
                identity_type,
            </if>
            <if test="identifier != null">
                identifier,
            </if>
            <if test="certificate != null">
                certificate,
            </if>
            <if test="name != null">
                `name`,
            </if>
            <if test="gender != null">
                gender,
            </if>
            <if test="face != null">
                face,
            </if>
        </trim>
        <trim prefix="select" suffix="" suffixOverrides=",">
            <if test="id != null">
                #{id,jdbcType=INTEGER},
            </if>
            <if test="user != null">
                #{user,jdbcType=INTEGER},
            </if>
            <if test="identityType != null">
                #{identityType,jdbcType=TINYINT},
            </if>
            <if test="identifier != null">
                #{identifier,jdbcType=VARCHAR},
            </if>
            <if test="certificate != null">
                #{certificate,jdbcType=VARCHAR},
            </if>
            <if test="name != null">
                #{name,jdbcType=VARCHAR},
            </if>
            <if test="gender != null">
                #{gender,jdbcType=VARCHAR},
            </if>
            <if test="face != null">
                #{face,jdbcType=VARCHAR},
            </if>
        </trim>
        from DUAL WHERE NOT EXISTS (
        SELECT id FROM  user_auth WHERE identifier = #{identifier,jdbcType=VARCHAR})
    </insert>

    <update id="updateByPrimaryKeySelective" parameterType="com.sikiapp.springbootinaction.model.UserAuth">
        update user_auth
        <set>
            <if test="user != null">
                `user` = #{user,jdbcType=INTEGER},
            </if>
            <if test="identityType != null">
                identity_type = #{identityType,jdbcType=TINYINT},
            </if>
            <if test="identifier != null">
                identifier = #{identifier,jdbcType=VARCHAR},
            </if>
            <if test="certificate != null">
                certificate = #{certificate,jdbcType=VARCHAR},
            </if>
            <if test="name != null">
                `name` = #{name,jdbcType=VARCHAR},
            </if>
            <if test="gender != null">
                gender = #{gender,jdbcType=VARCHAR},
            </if>
            <if test="face != null">
                face = #{face,jdbcType=VARCHAR},
            </if>
        </set>
        where id = #{id,jdbcType=INTEGER}
    </update>

    <update id="updateByPrimaryKey" parameterType="com.sikiapp.springbootinaction.model.UserAuth">
        update user_auth
        set `user` = #{user,jdbcType=INTEGER},
            identity_type = #{identityType,jdbcType=TINYINT},
            identifier = #{identifier,jdbcType=VARCHAR},
            certificate = #{certificate,jdbcType=VARCHAR},
            `name` = #{name,jdbcType=VARCHAR},
            gender = #{gender,jdbcType=VARCHAR},
            face = #{face,jdbcType=VARCHAR}
        where id = #{id,jdbcType=INTEGER}
    </update>

    <select id="selectByUserBaseId" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List" />
        from user_auth
        where user = #{userBaseId,jdbcType=INTEGER}
    </select>

    <select id="selectByIdentifier" resultMap="BaseResultMap">
        select
        <include refid="Base_Column_List" />
        from user_auth
        <where>
            <if test="identityType != null">
                and identity_type = #{identityType,jdbcType=TINYINT}
            </if>
            <if test="identifier != null and identifier !=''">
                and identifier = #{identifier,jdbcType=VARCHAR}
            </if>
            <if test="certificate != null and certificate != ''">
                and certificate = #{certificate,jdbcType=VARCHAR}
            </if>
        </where>
    </select>

    <update id="updatePasswordByPhone" parameterType="java.lang.String">
        update user_auth
        <set>
            <if test="certificate != null">
                certificate = #{certificate,jdbcType=VARCHAR},
            </if>
        </set>
        where identifier = #{identifier,jdbcType=VARCHAR}
    </update>


</mapper>